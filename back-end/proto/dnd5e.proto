syntax = "proto3";

package dnd5e;

// Service definition for D&D 5e SRD API
service Dnd5eService {
  // Get list of all available endpoints
  rpc GetEndpoints(GetEndpointsRequest) returns (GetEndpointsResponse);
  
  // Get list of items for a specific endpoint
  rpc GetList(GetListRequest) returns (GetListResponse);
  
  // Get detailed information about a specific item
  rpc GetItem(GetItemRequest) returns (GetItemResponse);
  
  // Search items across all endpoints
  rpc SearchItems(SearchItemsRequest) returns (SearchItemsResponse);
  
  // Get server health status
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Request/Response messages
message GetEndpointsRequest {
  // Empty request
}

message GetEndpointsResponse {
  repeated string endpoints = 1;
  int32 total_count = 2;
}

message GetListRequest {
  string endpoint = 1;
  int32 page = 2;        // For pagination
  int32 page_size = 3;   // Items per page
}

message GetListResponse {
  string endpoint = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
  repeated ApiItem items = 5;
  bool has_more = 6;
}

message GetItemRequest {
  string endpoint = 1;
  string index = 2;
}

message GetItemResponse {
  ApiItem item = 1;
  string raw_data = 2;  // JSON string of the full item data
}

message SearchItemsRequest {
  string query = 1;
  repeated string endpoints = 2;  // Optional: limit search to specific endpoints
  int32 max_results = 3;
}

message SearchItemsResponse {
  string query = 1;
  repeated SearchResult results = 2;
  int32 total_found = 3;
}

message HealthCheckRequest {
  // Empty request
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
  string message = 2;
  int64 timestamp = 3;
}

// Data structures
message ApiItem {
  string index = 1;
  string name = 2;
  string url = 3;
  string endpoint = 4;
}

message SearchResult {
  ApiItem item = 1;
  string matched_field = 2;  // Which field matched the search
  float relevance_score = 3; // Search relevance score
}
