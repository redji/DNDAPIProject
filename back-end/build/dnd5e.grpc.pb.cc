// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dnd5e.proto

#include "dnd5e.pb.h"
#include "dnd5e.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dnd5e {

static const char* Dnd5eService_method_names[] = {
  "/dnd5e.Dnd5eService/GetEndpoints",
  "/dnd5e.Dnd5eService/GetList",
  "/dnd5e.Dnd5eService/GetItem",
  "/dnd5e.Dnd5eService/SearchItems",
  "/dnd5e.Dnd5eService/HealthCheck",
};

std::unique_ptr< Dnd5eService::Stub> Dnd5eService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Dnd5eService::Stub> stub(new Dnd5eService::Stub(channel, options));
  return stub;
}

Dnd5eService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetEndpoints_(Dnd5eService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetList_(Dnd5eService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetItem_(Dnd5eService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchItems_(Dnd5eService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(Dnd5eService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Dnd5eService::Stub::GetEndpoints(::grpc::ClientContext* context, const ::dnd5e::GetEndpointsRequest& request, ::dnd5e::GetEndpointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::GetEndpointsRequest, ::dnd5e::GetEndpointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEndpoints_, context, request, response);
}

void Dnd5eService::Stub::async::GetEndpoints(::grpc::ClientContext* context, const ::dnd5e::GetEndpointsRequest* request, ::dnd5e::GetEndpointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::GetEndpointsRequest, ::dnd5e::GetEndpointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndpoints_, context, request, response, std::move(f));
}

void Dnd5eService::Stub::async::GetEndpoints(::grpc::ClientContext* context, const ::dnd5e::GetEndpointsRequest* request, ::dnd5e::GetEndpointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndpoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::GetEndpointsResponse>* Dnd5eService::Stub::PrepareAsyncGetEndpointsRaw(::grpc::ClientContext* context, const ::dnd5e::GetEndpointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::GetEndpointsResponse, ::dnd5e::GetEndpointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEndpoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::GetEndpointsResponse>* Dnd5eService::Stub::AsyncGetEndpointsRaw(::grpc::ClientContext* context, const ::dnd5e::GetEndpointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEndpointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Dnd5eService::Stub::GetList(::grpc::ClientContext* context, const ::dnd5e::GetListRequest& request, ::dnd5e::GetListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::GetListRequest, ::dnd5e::GetListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetList_, context, request, response);
}

void Dnd5eService::Stub::async::GetList(::grpc::ClientContext* context, const ::dnd5e::GetListRequest* request, ::dnd5e::GetListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::GetListRequest, ::dnd5e::GetListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, std::move(f));
}

void Dnd5eService::Stub::async::GetList(::grpc::ClientContext* context, const ::dnd5e::GetListRequest* request, ::dnd5e::GetListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::GetListResponse>* Dnd5eService::Stub::PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::dnd5e::GetListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::GetListResponse, ::dnd5e::GetListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::GetListResponse>* Dnd5eService::Stub::AsyncGetListRaw(::grpc::ClientContext* context, const ::dnd5e::GetListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Dnd5eService::Stub::GetItem(::grpc::ClientContext* context, const ::dnd5e::GetItemRequest& request, ::dnd5e::GetItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::GetItemRequest, ::dnd5e::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetItem_, context, request, response);
}

void Dnd5eService::Stub::async::GetItem(::grpc::ClientContext* context, const ::dnd5e::GetItemRequest* request, ::dnd5e::GetItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::GetItemRequest, ::dnd5e::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItem_, context, request, response, std::move(f));
}

void Dnd5eService::Stub::async::GetItem(::grpc::ClientContext* context, const ::dnd5e::GetItemRequest* request, ::dnd5e::GetItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::GetItemResponse>* Dnd5eService::Stub::PrepareAsyncGetItemRaw(::grpc::ClientContext* context, const ::dnd5e::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::GetItemResponse, ::dnd5e::GetItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::GetItemResponse>* Dnd5eService::Stub::AsyncGetItemRaw(::grpc::ClientContext* context, const ::dnd5e::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Dnd5eService::Stub::SearchItems(::grpc::ClientContext* context, const ::dnd5e::SearchItemsRequest& request, ::dnd5e::SearchItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::SearchItemsRequest, ::dnd5e::SearchItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchItems_, context, request, response);
}

void Dnd5eService::Stub::async::SearchItems(::grpc::ClientContext* context, const ::dnd5e::SearchItemsRequest* request, ::dnd5e::SearchItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::SearchItemsRequest, ::dnd5e::SearchItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchItems_, context, request, response, std::move(f));
}

void Dnd5eService::Stub::async::SearchItems(::grpc::ClientContext* context, const ::dnd5e::SearchItemsRequest* request, ::dnd5e::SearchItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::SearchItemsResponse>* Dnd5eService::Stub::PrepareAsyncSearchItemsRaw(::grpc::ClientContext* context, const ::dnd5e::SearchItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::SearchItemsResponse, ::dnd5e::SearchItemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::SearchItemsResponse>* Dnd5eService::Stub::AsyncSearchItemsRaw(::grpc::ClientContext* context, const ::dnd5e::SearchItemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Dnd5eService::Stub::HealthCheck(::grpc::ClientContext* context, const ::dnd5e::HealthCheckRequest& request, ::dnd5e::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::HealthCheckRequest, ::dnd5e::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void Dnd5eService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::dnd5e::HealthCheckRequest* request, ::dnd5e::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::HealthCheckRequest, ::dnd5e::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void Dnd5eService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::dnd5e::HealthCheckRequest* request, ::dnd5e::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::HealthCheckResponse>* Dnd5eService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::dnd5e::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::HealthCheckResponse, ::dnd5e::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::HealthCheckResponse>* Dnd5eService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::dnd5e::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

Dnd5eService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dnd5eService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dnd5eService::Service, ::dnd5e::GetEndpointsRequest, ::dnd5e::GetEndpointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Dnd5eService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::GetEndpointsRequest* req,
             ::dnd5e::GetEndpointsResponse* resp) {
               return service->GetEndpoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dnd5eService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dnd5eService::Service, ::dnd5e::GetListRequest, ::dnd5e::GetListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Dnd5eService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::GetListRequest* req,
             ::dnd5e::GetListResponse* resp) {
               return service->GetList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dnd5eService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dnd5eService::Service, ::dnd5e::GetItemRequest, ::dnd5e::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Dnd5eService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::GetItemRequest* req,
             ::dnd5e::GetItemResponse* resp) {
               return service->GetItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dnd5eService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dnd5eService::Service, ::dnd5e::SearchItemsRequest, ::dnd5e::SearchItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Dnd5eService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::SearchItemsRequest* req,
             ::dnd5e::SearchItemsResponse* resp) {
               return service->SearchItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dnd5eService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dnd5eService::Service, ::dnd5e::HealthCheckRequest, ::dnd5e::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Dnd5eService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::HealthCheckRequest* req,
             ::dnd5e::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

Dnd5eService::Service::~Service() {
}

::grpc::Status Dnd5eService::Service::GetEndpoints(::grpc::ServerContext* context, const ::dnd5e::GetEndpointsRequest* request, ::dnd5e::GetEndpointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dnd5eService::Service::GetList(::grpc::ServerContext* context, const ::dnd5e::GetListRequest* request, ::dnd5e::GetListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dnd5eService::Service::GetItem(::grpc::ServerContext* context, const ::dnd5e::GetItemRequest* request, ::dnd5e::GetItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dnd5eService::Service::SearchItems(::grpc::ServerContext* context, const ::dnd5e::SearchItemsRequest* request, ::dnd5e::SearchItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dnd5eService::Service::HealthCheck(::grpc::ServerContext* context, const ::dnd5e::HealthCheckRequest* request, ::dnd5e::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dnd5e

